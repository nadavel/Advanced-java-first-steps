import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

//this class represents the Hangman game
public class GameFrame extends JFrame implements ActionListener {
    private String status;
    private static ArrayList<String> words = new ArrayList<>();
    private static Random random = new Random();
    private File file = new File("src/dictionary.txt");
    private Scanner scanner;
    private String word;
    private char[] lettersBtn = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'
            , 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'
            , 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    private JButton[] buttons;
    JButton newButton;
    Hangman hm ;
    WordPanel wp ;
    JPanel letters;
    JPanel box;
    private final int MAX_MISTAKES = 7;

    //constructor
    public GameFrame() {
        try {
            scanner = new Scanner(file);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        while (scanner.hasNextLine())
            words.add(scanner.nextLine());
        word =randomWord();
        hm = new Hangman();
        wp = new WordPanel(word);
        letters = new JPanel();
        letters.setLayout(new GridLayout(7, 4));
        buttons = new JButton[26];
        for (int i = 0; i < 26; ++i) {
            buttons[i] = new JButton(Character.toString(lettersBtn[i]));
            letters.add(buttons[i]);
            buttons[i].addActionListener(this);
        }

        newButton = new JButton("New game");
        newButton.addActionListener(this);
        box = new JPanel();
        box.setLayout(new GridLayout(1,2));
        box.add(hm);
        box.add(letters);

        this.add(box);
        this.add(wp);
        this.add(newButton);

        setLayout(new GridLayout(3, 1));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private String randomWord(){
        int i = random.nextInt(words.size()+1);
        return words.get(i);
    }

    private void checkGuess(char guess){
        if (!wp.check(guess)){
            hm.mistake();
            hm.repaint();
        }
        if (hm.getMistakes()==MAX_MISTAKES)
            status = "lost";

        if (wp.getGameWon())
            status = "won";
    }
    //reinitialize data for starting a new game
    public void restart(){
        status = "in progress";
        word = randomWord();
        hm.reset();
        wp.reset(word);
        for (int i = 0; i < 26; ++i)
            buttons[i].setEnabled(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == newButton) {
            restart();
        }
        else {
            JButton pressed = (JButton) e.getSource();
            char guess = pressed.getText().charAt(0);
            checkGuess(guess);
            pressed.setEnabled(false);
        }
        if (status == "won" || status == "lost"){
            int input = JOptionPane.showConfirmDialog(null,
                    "New game?", "Select an Option...", JOptionPane.YES_NO_CANCEL_OPTION);
            if (input == 0)
                restart();
            else
                System.exit(0);
        }
    }

}

  
